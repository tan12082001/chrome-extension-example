Steps to Create an Chrome Extension with React Application.

// Tutorial Link: https://medium.com/@tharshita13/creating-a-chrome-extension-with-react-a-step-by-step-guide-47fe9bab24a1

    - update the app component to display the required content, here simply `hello world`.
    - Install the dependencies including webpack (exists in the package but still installed the library following the tutorial).
        * npm install --save-dev webpack webpack-cli copy-webpack-plugin css-loader ts-loader html-webpack-plugin ts-node
    - create webpack.config.js file as default react app doesnt provide the config file for webpack.
    - Update the config file with the below code:


const path = require("path");
const HTMLPlugin = require("html-webpack-plugin");
const CopyPlugin = require("copy-webpack-plugin")

module.exports = {
    entry: {
        index: "./src/index.js"
    },
    mode: "production",
    module: {
        rules: [
            {
              test: /\.js?$/,
               use: [
                 {
                  loader: "ts-loader",
                   options: {
                     compilerOptions: { noEmit: false },
                    }
                  }],
               exclude: /node_modules/,
            },
            {
              exclude: /node_modules/,
              test: /\.css$/i,
               use: [
                  "style-loader",
                  "css-loader"
               ]
            },
        ],
    },
    plugins: [
        new CopyPlugin({
            patterns: [
                { from: "manifest.json", to: "../manifest.json" },
            ],
        }),
        ...getHtmlPlugins(["index"]),
    ],
    resolve: {
        extensions: [".tsx", ".ts", ".js"],
    },
    output: {
        path: path.join(__dirname, "dist/js"),
        filename: "[name].js",
    },
};

function getHtmlPlugins(chunks) {
    return chunks.map(
        (chunk) =>
            new HTMLPlugin({
                title: "React extension",
                filename: `${chunk}.html`,
                chunks: [chunk],
            })
    );
}

    - After this update the package.json file with 
        * "scripts": {
                "build": "webpack --config webpack.config.js",
                "watch": "webpack -w --config webpack.config.js"
            }
    - Create an manifest.json file to the root directory

        * {
                "version": "1.0.0",
                "manifest_version": 3,
                "name": "React Chrome Extension",
                "description": "This is a Chrome extension built with React and TypeScript",
                "action": {
                    "default_popup": "js/index.html",
                    "default_title": "React Chrome Extension"
                }
            }
    - run the npm run build command.
    - install babel loader for handling .js files
        * npm install --save-dev babel-loader @babel/core @babel/preset-env @babel/preset-react
    - create and update the .babelrc
        * {
            "presets": [
                "@babel/preset-env",
                "@babel/preset-react"
            ]
            }
    
    - update the webpack.config file

const path = require("path");
const HTMLPlugin = require("html-webpack-plugin");
const CopyPlugin = require("copy-webpack-plugin");

module.exports = {
    entry: {
        index: "./src/index.js"
    },
    mode: "production",
    module: {
        rules: [
            {
              test: /\.tsx?$/,
               use: [
                 {
                  loader: "ts-loader",
                   options: {
                     compilerOptions: { noEmit: false },
                    }
                  }],
               exclude: /node_modules/,
            },
            {
              test: /\.js$/, // Add this rule for JavaScript files
              exclude: /node_modules/,
              use: {
                loader: 'babel-loader'
              }
            },
            {
              exclude: /node_modules/,
              test: /\.css$/i,
               use: [
                  "style-loader",
                  "css-loader"
               ]
            },
        ],
    },
    plugins: [
        new CopyPlugin({
            patterns: [
                { from: "manifest.json", to: "../manifest.json" },
            ],
        }),
        ...getHtmlPlugins(["index"]),
    ],
    resolve: {
        extensions: [".tsx", ".ts", ".js"],
    },
    output: {
        path: path.join(__dirname, "dist/js"),
        filename: "[name].js",
    },
};

function getHtmlPlugins(chunks) {
    return chunks.map(
        (chunk) =>
            new HTMLPlugin({
                title: "React extension",
                filename: `${chunk}.html`,
                chunks: [chunk],
            })
    );
}

    - after running the npm run build, it creates a dist folder.
    - to load the extension
        open chrome://extensions
        on the developer mode 
        select load unpacked
        after, you will be able to see the extension in the list.


LOAD UNPACKED:
    - basically an unpacked extension which means the extension is in its development form consisting of individual files and folders rather than packed in a single `.crx` file.
        * `.crx` file is the file format used by google chrome for packaging and distributing chrome extensions.
        it is essentially a compressed archive containing all the files necessary for a chrome extension to run, including HTML, CSS, JavaScript, images and the `manifest.json` file.
    - In .crx file there are key points
        * packaging: when you pack an extension using the chrome browser, it generates a `.crx` file along with a private key file. this private key is used to sign the extension and ensure its authenticity.
        * distribution: the `.crx` file is what you upload to the chrome web store when you want to distribute your extension. users can then download and install the extension directly from the store.
        * security: by signing the `.crx` file with a private key, chrome ensures that the extension has not been tampered with. this provides a layer of security and trust for users.
    - creating a .crx file
        * ensure all extension files are in the correct format and structure including the `manifest.json` file.
        * navigate to `chrome://extensions/`
        * open the developer mode and click on pack extension
        * in the extension root directory field select the folder containing your extension files. and click on the pack extension,
        * then chrome will create a .crx file and private key file. the crx file is the one that is used fpr distribution.
    - in the vs code project for the react application you need to select the dist folder after ruuning the build command then it generates the .crx file.
* the load unpacked helps in testing and debugging the extension unlike with .crx file.

MANIFEST FILE:
    * ensures you have a properly configured `manifest.json` file in the project root. this file tells chrome about your extension, such as its name, version, permissions and entry points.

- Load unpacked feature in chrome to test the extension locally.
- once the extension is ready to deploy your extension, you need to pack it into a `.crx` file.
- we can publish the extension in chrome web store by creating a developer account on the chrome web store developer dashboard.